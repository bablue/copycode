When using `MiniCssExtractPlugin`, you don't need `style-loader`. `MiniCssExtractPlugin` is responsible for extracting CSS into separate files, which is generally preferred for production builds because it allows for better caching and parallel loading of CSS and JavaScript.

Hereâ€™s an updated version of `webpack.config.js` without `style-loader`:

### Step-by-Step Installation and Configuration:

1. **Install necessary dependencies**:

   Run the following command to install webpack and required plugins:
   ```bash
   npm install --save-dev webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react mini-css-extract-plugin html-webpack-plugin clean-webpack-plugin css-loader sass-loader file-loader
   ```

2. **Update `webpack.config.js`**:

   Update your `webpack.config.js` file to handle SCSS files as well:

   ```js
   const path = require('path');
   const { CleanWebpackPlugin } = require('clean-webpack-plugin');
   const HtmlWebpackPlugin = require('html-webpack-plugin');
   const MiniCssExtractPlugin = require('mini-css-extract-plugin');

   module.exports = {
     entry: './src/index.jsx', // Entry point for your application
     output: {
       path: path.resolve(__dirname, 'dist'), // Output directory
       filename: 'bundle.js', // Output bundle file name
     },
     resolve: {
       extensions: ['.js', '.jsx'], // File extensions to handle
     },
     module: {
       rules: [
         {
           test: /\.jsx?$/, // Match both .js and .jsx files
           exclude: /node_modules/, // Exclude node_modules directory
           use: {
             loader: 'babel-loader', // Use babel-loader for transpiling JavaScript files
             options: {
               presets: ['@babel/preset-env', '@babel/preset-react'], // Babel presets for modern JavaScript and React
             },
           },
         },
         {
           test: /\.css$/, // Match .css files
           use: [MiniCssExtractPlugin.loader, 'css-loader'], // Use MiniCssExtractPlugin and css-loader for CSS files
         },
         {
           test: /\.scss$/, // Match .scss files
           use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader'], // Use MiniCssExtractPlugin, css-loader, and sass-loader for SCSS files
         },
         {
           test: /\.(png|svg|jpg|gif)$/, // Match image files
           use: ['file-loader'], // Use file-loader for images
         },
       ],
     },
     plugins: [
       new CleanWebpackPlugin(), // Clean the output directory before each build
       new HtmlWebpackPlugin({
         template: './src/index.html', // HTML template to use
         filename: 'index.html', // Output HTML file name
       }),
       new MiniCssExtractPlugin({
         filename: 'styles.css', // Output CSS file name
       }),
     ],
     devServer: {
       static: path.resolve(__dirname, 'dist'), // Serve content from the output directory
       compress: true, // Enable gzip compression
       port: 9000, // Port for the development server
       historyApiFallback: true, // Enable support for history API fallback (useful for React Router)
     },
     mode: 'development', // Set the mode to development for better debugging
   };
   ```

### Explanation:

1. **Entry**: Specifies `index.jsx` as the entry point of your application.
2. **Output**: Sets the output directory to `dist` and the bundle file name to `bundle.js`.
3. **Resolve**: Configures webpack to handle `.js` and `.jsx` file extensions.
4. **Module Rules**:
   - **JavaScript and JSX files**: Uses `babel-loader` with `@babel/preset-env` and `@babel/preset-react` to transpile modern JavaScript and React code.
   - **CSS files**: Uses `MiniCssExtractPlugin.loader` and `css-loader` to handle CSS imports.
   - **SCSS files**: Uses `MiniCssExtractPlugin.loader`, `css-loader`, and `sass-loader` to handle SCSS imports.
   - **Image files**: Uses `file-loader` to handle image imports.
5. **Plugins**:
   - **CleanWebpackPlugin**: Cleans the output directory before each build.
   - **HtmlWebpackPlugin**: Generates an HTML file based on a template (`index.html`).
   - **MiniCssExtractPlugin**: Extracts CSS into separate files.
6. **DevServer**: Configures the development server with content base, gzip compression, port, and history API fallback for React Router.
7. **Mode**: Sets the mode to development for better debugging.

### Additional Steps:

1. **Ensure you have a `src/index.html` file**:
   Create a simple `index.html` file in your `src` directory:
   ```html
   <!DOCTYPE html>
   <html lang="en">
     <head>
       <meta charset="UTF-8" />
       <meta name="viewport" content="width=device-width, initial-scale=1.0" />
       <title>React App</title>
     </head>
     <body>
       <div id="root"></div>
     </body>
   </html>
   ```

2. **Ensure you have a `src/index.jsx` file**:
   Create an `index.jsx` file in your `src` directory with your React entry point:
   ```jsx
   import React from 'react';
   import ReactDOM from 'react-dom';
   import App from './App';

   ReactDOM.render(<App />, document.getElementById('root'));
   ```

3. **Create or update your SCSS files**:
   Ensure you have SCSS files in your project and import them in your JavaScript or JSX files where needed.

4. **Import SCSS files in your components**:
   For example, in your `App.jsx`:
   ```jsx
   import React from 'react';
   import './styles.scss'; // Import your SCSS file

   function App() {
     return (
       <div className="App">
         <h1>Hello, world!</h1>
       </div>
     );
   }

   export default App;
   ```

With these configurations and steps, your React application should be set up to build successfully with webpack, handling both `.js`, `.jsx`, and `.scss` files, and incorporating `MiniCssExtractPlugin`, `HtmlWebpackPlugin`, and `CleanWebpackPlugin`.
